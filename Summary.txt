This repo has the flutter codes from the fourth day of my Flutter training, 
**********  IGNORE THE TYPOS PLEASE ***********************

[2020-07-22] Day 4{
	Learnt to add Icon,
	Learnt to add Images,
	Learnt to add Scaffold,
	Learnt to add AppBar,
	Session was concentrated on AppBar,
	We can also remove the debug banner from app,
}

[2020-07-23] Day 5{
	Session was concentrated on Body of our application,
	Learnt about Container, Column and the difference b/w them,
	Learnt about decoration property,
	Learnt to style the border of Container,
	Conatainer allows us to use only one child property,
	Column has a list<widget> in which we can write children,
}

[2020-07-24] Day 6{
	Session was concentrated on few core concepts of Flutter,
	Learnt about Hot reloading,
	Hot reloading is the best thing for any developer,
	We need to enable hot reloading when we begin our code from scratch,
	Hot reloading refreshes the update part in the code without completely running the code again,
	This is done with the help of BuildContext and Stateless Widget,
	We will be learning more about it in future,
	Then we learnt about the concept of package (read the text file in day6 directory),
	We imported some packages to change colour of status bar and also to write a toast(toast is nothing but a popup),
	We then used these two packages to write a code and changed the colour of statusbar,
	We also wrote a code for a toast using the imported package.
}

[2020-07-27] Day 7{
	Session was concentrated on creating a custom layout,
	We used te concepts of Container and Column to create one,
	We first understood the concept of margin and padding and how they are different,
	Although we can create a container inside a container but there is no practical use case of it,
	Container can only have one child and there is no use of it,
	We can use a Column inside a Container which can then have multiple children,
	As the name suggests Column arranges the widgets in the form of column,
	We also have a property for Row and also a Stack widget which helps in overlapping of widget,
	Since there are no features of negative margins thus flutter provides us with the feature of Stack,
	Learnt about the InkWell and GestureDetector feature also and how they are different,
	Learnt few more terminologies of flutter including EdgeInsets etc,
}

[2020-07-29] Day 8{
	Session was more focused on the backend,
	We learnt to integrate our mobile app with linux server using http protocol,
	We learnt about the status code of a webapp,
	Learnt about the request method while estabilishing a connection with a webserver,
	Used this concept to execute a python script on our webserver by just pressing a button,
	This was done using http protocol and thus had to install http package and update our pubsec file,
	Learnt the concept of RaisedButton and added an action listener to it,
	The action listener prints the date and time of linux server on our console,
	Learnt about the concept of cgi (common gateway interface) and how we can use cgi-bind directory to execute python script,
	This method is very powerful to execute any command on our linux server through our mobile application,
	While dealing with http package we were also introduced to the async and await keyword.
}

[2020-07-30] Day 9{
	Learnt about few more core concepts of dart programming language,
	Learnt about functional programming and rules to implement functional programming,
	Played with dart functions and understood the concepts of positional arguments and named arguments,
	Also learnt about the methods of string interpolation in dart,
	Learnt about the Function keyword,
	Learnt about lambda expression in dart denoted by ( => ) symbol,
	Lambda is one of the rules to implements functional programming out of several others,
	Learnt about another rule of functional programming that goes by the name, higher order functions,
	Learnt how these concepts can make our flutter code shorter and easy to read while debugging.
}

[2020-07-31] Day 10{
	In this session we learnt about card widget and assets,
	Card provides us with some basic decoration like rounded border and shadow,
	We can also alter the elevation of card but cannot change height or width of card,
	Card takes the size as that of its child,
	We can use card inside a container to change it's size and much more,
	Learnt about the alignment and the default alignments of Column and Row,
	There are two type of alignment, they are mainAxisAlignment and crossAxisAlignment,
	Assets are images or audio or video files that are stored locally in our system and we want to bind them with  our app,
	We can also access our images and audios even without the internet connectivity,
	We need to make changes into our pubspec.yaml file to access assets,
	Learnt to embed audio and image assets in our application.
}

[2020-08-05] Day 11{
	In this session we learnt to take user input through out application,
	This can be done using TextField() Widget in Flutter,
	TextField() widget provide us multiple features,
	We can set our hintText and helperText etc,
	We can also customize widget decoration in TextField too,
	We can customize almost everything in TextField() Widget,
	It has onChanged key which allows us to write an event to perform,
	We took input from user and run that linux command in our linux server,
	This can be done using the technique learnt on day8,
	We created python script in our linux server which we can run through the application and print the output in the console terminal,
}

[2020-08-06] Day 12{
	In this session we learnt to integrate docker with our flutter application,
	Basically we learnt some more concepts about http and cgi-bin,
	We learnt to pass variables in the URL to retrieve some information,
	We used GET method frpm HTTP protocol in this scenario,
	We can pass any variable through URL using '?' symbol,
	Example: http://IP/cgi-bin/script.py?var1=val1&var2=val2,
	We then learnt to retrieve these information within our python script,
	We have to 'import cgi' in our python file and cgi.FieldStorage().getValue('var'),
	This is the basic syntax to retrieve variables that we pass through our URL,
	We basically used this to pass docker commands from our application but doing this is not enough,
	By default our apache webserver do not have permissions to make these changes,
	Thus we made all this a bit more permissive using the basic knowledge of linux,
	*****( I will be attaching the python script in day12 folder and also do refer notes for better understanding)*****
}

[2020-08-10] Day 13{
	In this session we learnt about Future datatype and some more concepts of dart,
	This session was to study more about dart programming language and we learnt how and when we can apply the concept of Future datatype in out flutter application,
	We first learnt about the concept of synchronization in any programming language and when we don't need it,
	Usually all the programming languages use synchronization by default - i.e to run the program in a sequence,
	Suppose if 3 functions are called in main() then all of them will run in the order they are written,
	But if some function is taking too long then we might need to run the next function,
	This is where we use the 'async' and 'await' keyword,
	We can either create a Future function or use any of these two keywords,
	We have to use 'async' with 'await' and by default the function is Future Instance,
	We then revised the concept of day8 and understood the working of http package,
}

[2020-08-11] Day 14{
	In this session we learnt the basics of Stateful Widget,
	First we learnt the features which are not provided by Stateless Widget,
	Stateless Widget are immutable and cannot be changed at runtime,
	build() function is the one responsible to create the Widget tree and is immutable in the case of Stateless Wisget,
	Stateful Widget are mutable - i.e they can be changed at runtime,
	We then applied this concept and built an application,
	This app takes command as input from user(TextField),
	We then setup a linux server and used http package in flutter to run command in this OS,
	The ouput of this command is then printed on the application,
	This is only possible if we use StatefulWidget,
	We also learnt some basics of dart programming language - ' ?? ' operator,
	Example: print(variable ?? "Hello") this code will print "Hello" only if the variable is not defined or is null,
}

[2020-08-13] Day 15{
	This session was not a technical session,
	It was related to the startup groups and other discussion
}

[2020-08-14] Day 16{
	In this session we learnt about API and JSON,
	API stands for Application Programming Interface and it defines an interface to the users,
	It defines interactions between multiple softwares and intermediates,
	We have already dealt with APIs and it can be written in any programming language,
	In our case we used python to write APIs,
	JSON is the format to share information, 
	Most APIs use JSON format to share data from server to client,
	We also learnt to decode JSON files using json parsers,
	There is a default parser in RHEL linux known as "jq",
	Everything written in JSON is in between {} blocks,
	We then learnt to use APIs in our application,
	We used Openweather API to get weather details in our application,
}

[2020-08-18] Day 17{
	In this session we learnt about integrating google maps with android app and using phone gps sensor,
	We also used to a floatingactionbutton as an event listener,
	This button call the getLocation() function,
	We also leant to change the default theme of our mobile application to dark theme though we can also create our own custom theme,
	We then learnt the way to integrate google maps in our app,
	There are a few pre-requisites to do so - we shall have a Google Cloud Platform account and an google API key,
	We shall also use the google_maps_flutter package,
	To add the API key - we shall add the API key in AndroidManifest.xml file,
	We shall then add a geolocator package in order to use GPS sensor of our phone,
	Using the geolocator package we shall get our location first and then show that location on map
}

[2020-08-19] Day 18{
	In this session we learnt about some more concepts of dart programming language i.e object oriented concepts,
	We learnt about the Object Oriented Programming in Dart,
	We began with learning about class which is just a reusable block of code and its instance is provided to every new object,
	We then coded a basic class code and made its object,
	We also learnt about getters and setters,
	Then we learnt about a function which get's called as soon as a new object of a class is created,
	A user can define this constructor as well but it is not mandatory,
	Defining a constructor totally depends on use case to use
}

[2020-08-20] Day 19{
	In this session we continued the discussion on object oriented concepts of dart programming language,
	We learnt about the inheritance concepts of object oriented programming,
	Inheritance is the concept of inheriting the features of parent class to the children class,
	We also learnt the use of super keyword,
	Also learnt about the annotations eg:- @override,
	We can also override the method of parent class in the child class,
	Overriding is known as run-time polymorphism
}

[2020-08-25] Day 20{
	In this session we learnt to navigate through different pages in flutter,
	Also it Container Widget is not scrollable thus we also learnt to use listview builder,
	We need to define routes to our other pages in MaterialApp itself,
	"build" is responsible for creating widget tree in flutter,
	We can either use "home" or "routes" in MaterialApp,
	To do this we also have to write the initialRoute which is same as home key in MaterialApp,
	Navigator function helps us to navigate through multiple screens in flutter,
	Then we learnt about the ListView.builder - it creates infinite widgets by default,
	This can be solved using itemCount key in the ListView,
	We then integrated these concepts in a mobile application.
}

[2020-08-26] Day 21{
	In this session we learnt some more concepts of Stateful Widget in flutter,
	We actually learnt when and where should we go for Stateful Widget,
	Though we have already studied about StatefulWidget but in this we learnt about few more concepts,
	Stateful widget have the feature of changing data in its runtime unline the stateless widget,
	But Stateful widget is smart and knows about its complete lifecycle,
	It provides us function line "initState()" and "deactivate",
}

[2020-08-27] Day 22{
	In this session we learnt about "of" function and exception handling,
	We used "of" function to create a SnackBar at the bottom of the page whenever a button is pressed,
	of(context) can gather info regarding the parent of the function used,
	We also learnt  about SnackBar(),
	SnackBar is the popup that appears at the bottom of page for a certain duration whenever an event is called,
	It takes the width of scaffold widget until declared,
	There are much more functionalities of a SnackBar,
	We then learnt about the concept of exception handling in dart,
	Exception handling is used to handle run time errors which even our IDE cannot detect,
	One such example of this could be divisionByZero error and much more,
	It is always suggested to keep our uncertain code inside the try-catch blocks so that the whole app doesn't break whenever there is an error.
}

[2020-08-31] Day 23{
	In this session we learnt about firebase service by google and learnt to integrate our mobile application with it,
	We shall first understand what is firebase and why we need it,
	Firebase is an umbrella of services providing multiple services like database or API etc,
	Cloud platforms like AWS and GCP provide multiple services for various purpose,
	Lambda service by AWS is an example of Faas or FireStore by google is an example of Backend as a service,
	With such services a developer shall not worry about developing the complete backend but instead BaaS can be used,
	We then learnt the difference between app level file and project level file,
	We also created a flutter project providing our organization name using --org tag,
	We then went step by step adding firebase details in our application,
	We manipulated application files so that our application can communicate to these services over a network,
	We also debugged few challenges during the process,
}

[2020-09-01] Day 24{
	In this session we continued learning about firebase and firestore,
	We used the firestore database as a service to create our own database ans access it from our mobile application,
	We first creates a database instance and then created a collection in it,
	A collection is like a table in a database and then we create document and data,
	We then installed the required packages in dart which include cloud_firebase and firebase_core,
	We then understood how we can write and read data from our mobile application to the database in the google cloud,
	We also used the concept of async and await in dart to get the data from the internet to our application
}

[2020-09-03] Day 25{
	In this session we used another service by firebase - named "authentication",
	Authentication as the name suggests is the service through which we can authenticate users,
	Firebase provide us multiple providers including google login - facebook login etc,
	We can also maintain our own database in this which we have to select through email and password option,
	It provides us a secure way to authenticate user, 
	We can create and retrieve user credentials using just a tap of button from our mobile phone,
	We then implemented this concept in a multi page application,
	This application provides different pages for registering and login,
	And after login user is also redirected to some main page,
}

[2020-09-04] Day 26{ 
	In this session we implemented the knowledge of authentication and built a basic sign up and login page,
	We first created a home page which gives an option to the user to either register or login using an existing account,
	We then redirected the user to respective screen,
	We also learnt about a new button widget called MaterialButton,
	We also learnt to provide custom keyboards while filling the login or register form,
	We then redirected the users to the main screen after they have logged in,
	We then added a button through which a user can retrieve his info from the database,
	We also created a logout button which takes user to the home screen again.
}

[2020-09-07] Day 27{
	In this session we learnt about data streaming and creating a loading page,
	While we register or login - it takes time to login,
	Till that time we show a loading icon which will be shown as soon as the submit/login/register button is pressed until the user is redirected to the next page,
	For this we need to install a plugin called modal_progress_hub,
	We then learnt to stream data from over the network,
	Till now we created a button which will get us data when pressed this is a manual process,
	So we wait for the new data to arrive and as soon as this happens the message will automatically be shown,
	This process is called subscription and we implemented this with the help of snapshots feature provided by firebase.
}

[2020-09-08] Day 28{
	In this session we learnt about StreamBuilder and added some basic dart programmin features in our chat application,
	We also learnt about controllers in flutter,
	We created a text controller which will clear the textfield as soon as the send message button is pressed,
	We also used stream builder to get live data from the database and append it to a dart list,
	Then as soon as the send button is pressed the new message is shown just like in other chat applications,
	Streambuilder uses two important features to provide us live data,
	builder helps us build widget as the new data arrives,
	stream helps acts as collection subscription,
	We then implemented all these conepts in our chat application
}

[2020-09-10] Day 29{
	In this session we learnt to use mobile camera from our application and created an image picker,
	For this we requires a plugin called image_picker,
	Since capturing/picking image is a future event - we should place it in async-await function,
	There are many ways to getImage in image_picker module apart from camera,
	image_picker module also provides us the path of the image in the androic device,
	Since the AVD doesn't have its own camera - we can either use our laptop camera to capture images or use pre-build scenes,
	We then displayes the captures image on our stateful mobile screen,
	We then uploaded the captured image to the cloud,
	The object storage service is provided by Firebase and thus can be used to use the same,
	We just need to pass the image to a function which uploads it to the cloud,
	It is also easy to get the image from the cloud and display it on our mobile application
}
